eXpOS Abstractions

eXpOS provides the following fundamental abstractions to an application program:

    -The eXpFS logical file system
    -The process abstraction for programs in execution
    -Methods of resource sharing
    -Primitives for concurrent access control and process synchronization
    -The system call interface that specifies the interface through which application programs 
     can invoke the system calls and access the OS services.
    -The extended eXpOS specification provides a user abstraction


When a process is created using the fork system call, the OS creates a virtual address space for 
the new process. Each process is given a view that it has its own virtual address space containing 
its code, library, stack and heap. The virtual address space is a continuous address space starting 
from address 0 up to a maximum limit that is implementation dependent. Internally, the OS maps the 
virtual address space into the machine memory using hardware mechanisms available in the machine 
like paging/segmentation.

When a new process is created using the fork system call, the child process shares the library, 
code and heap with the parent. This means that any modifications to memory words in these regions 
by one process will result in modification of the contents for both the processes. The stack region 
of the parent and the child will be separate. The parent and the child concurrently proceeds execution 
from the instruction immediately following the fork system call in the code. 

The stack region of a process stores the variables and stack frames during the execution of the program. 
Since our implementation of eXpOS does not explicitly provide an area for storing static data, they are 
stored on the stack. Dynamic memory allocation is normally done from the heap region. Variables to be 
shared between different processes could also be allocated in the heap.

A process can load an XEXE executable file from the file system into the virtual address space (of the 
calling process) using the exec system call. During loading, the original code and stack regions are 
overlayed by those of the newly loaded program. If the original process had shared its heap with its 
parent process (or any other process), the OS ensures that other processes do not lose their shared heap data.


It must be noted here that an application program is free to violate the ABI conventions and decide to use 
its virtual address space in its own way. It is only required that the executable file follows XEXE format 
in order to ensure that exec system call does not fail. As long as such a process operates within its own 
address space, the OS permits the process to execute. However, if at any point during its execution, the 
process generates a virtual address beyond its permitted virtual address space, a hardware exception will 
be generated and the OS routine handling the exception will terminate the process. 



Access Control and Synchronization

Two concurrently executing processes sharing resources like files or memory (for example, parent and child 
processes sharing the heap) would like to ensure that only one of them execute critical section code that 
access/modify a resource that is shared between them.

A classical solution to this problem is using semaphores. A process can acquire a semaphore using the 
Semget system call and share it with its child (or later generation) processes. A semaphore can be locked 
by any of these sharing processes using the SemLock system call and the execution of all other processes 
trying to lock the same semaphore subsequently will be suspended (blocked) by the OS until the locking 
process unlocks the semaphore using the SemUnlock system call.

The Wait system call allows a process to suspend its own execution until another process wakes it up 
using the Signal system call. This primitive is useful when a process must be made to wait at a point 
during its execution until another related process signals it to continue. 

Semantics of Fork operation:

    A new child process with a new process id and address space is created which is an exact replica of 
    the original process with the same library, code,stack and heap regions. (The OS assigns a new process 
    id for the child and returns this value to the parent as the return parameter of the fork system call.) 
    The heap, code and library regions of the parent are shared by the child. This means, any modification 
    of contents of these regions by one process during subsequent execution will change the other as well. 
    Note that both processes are in concurrent execution subsequent to the fork operation. Stack is 
    separate for the child and is not shared.
    All open file handles and semaphores are shared by the parent and the child. Note that file handles 
    (or semaphore identifiers) of files (or semaphores) that are opened (or created) subsequent to the 
    fork operation by the parent or the child will be exclusive to the particular process and will not 
    be shared. The parent and the child continue execution from here on.


The Exit system call terminates a process after closing all files and semaphores. The Wait system call 
suspends the execution of a process till another process exits or executes a Signal system call. (System 
calls for access control and synchronization). The Signal system call resumes the execution of a process 
that was suspended by wait. Wait and Signal operations are discussed in more detail in the next section.




The Fork system call spawns a new process. The new process and the process which invoked fork have a 
child-parent relationship. The child process will be allocated a different PID and a new address space. 
Hence, the child process will have a different process table and page table. However, the child and the 
parent will share the code and heap regions of the address space. The child will be allocated two new 
stack pages and a new user area page. 
