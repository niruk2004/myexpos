Disk Interrupt Handler:


In this stage, we will introduce disk interrupt handling in XSM. In the previous stage, we used 
the loadi statement to load a disk block into a memory page. When the loadi statement (immediate 
load) is used for loading, the machine will execute the next instruction only after the block 
transfer is complete by the disk controller. A process can use the load statement instead of loadi 
to load a disk block to a memory page. The load statement in SPL translates to LOAD instruction in 
XSM.  The XSM machine doesn't wait for the block transfer to complete, it continues with the 
execution of the next instruction. Instead, the XSM machine provides a hardware mechanism to detect 
the completion of data transfer. XSM machine raises the disk interrupt when the disk operation is 
complete. 

In real operating systems, the OS maintains a software module called the disk device driver module 
for handling disk access. This module is responsible for programming the disk controller hardware 
for handling disk operations. When the OS initiates a disk read/write operation from the context of 
a process, the device driver module is invoked with appropriate arguments. In our present context, 
the device manager module integrates a common "driver software" for all devices of XSM. The load 
and store instructions actually are high level "macro operations" given to you that abstract away 
the low level details of the device specific code to program the disk controller hardware. The loadi 
instruction abstracts disk I/O using the method of polling whereas the load instruction abstracts 
interrupt based disk I/O. 

To initiate the disk transfer using the load statement, first the process has to acquire the disk. 
This ensures that no other process uses the disk while the process which has acquired the disk is 
loading the disk block to the memory page. eXpOS maintains a data structure called Disk Status Table 
to keep track of these disk-memory transfers. The disk status table stores the status of the disk 
indicating whether the disk is busy or free. The disk status table has a LOAD/STORE bit indicating 
whether the disk operation is a load or store. The table also stores the page number and the block 
number involved in the transfer. To keep track of the process that has currently acquired the disk, 
the PID of the process is also stored in the disk status table. The SPL constant DISK_STATUS_TABLE 
gives the starting address of the Disk Status Table in the XSM memory.

After the current process has acquired the disk for loading, it initializes the Disk Status Table 
according to the operation to be perfromed (read/write). The process then issues the load statement 
to initiate the loading of the disk block to the memory page. As mentioned earlier, the XSM machine 
oes not wait for the transfer to complete. It continues with the execution of the next instruction. 
However, virtually in any situation in eXpOS, the process has to wait till the data transfer is 
complete before proceeding (why?). Hence, the process suspends its execution by changing its state 
to WAIT_DISK and invokes the scheduler, allowing other concurrent processes to run.

When the load/store transfer is complete, XSM machine raises the hardware interrupt called the disk 
interrupt. This interrupt mechanism is similar to the console interrupt. Note that when disk interrupt 
occurs, XSM machine stops the execution of the currently running process. The currently running 
process is not the one that has acquired the disk (why?). The disk interrupt handler releases the 
disk by changing the STATUS field in the Disk Status table to 0. It then wakes up all the processes 
waiting for the disk (by changing the STATE from WAIT_DISK to READY) which also includes the process 
which is waiting for the disk-transfer to complete. Then returns to the process which was interrupted 
by disk controller.

use of idle process:
XSM machine disables interrupts when executing in the kernel mode. Hence, the disk controller can raise 
an interrupt only when the machine is executing in the user mode. Hence the OS has to schedule "some 
process" even if all processess are waiting for disk/terminal interrupt - for otherwise, the device 
concerned will never be able to interrupt the processor. The IDLE process is precisely designed to 
take care of this and other similar situations. 



Does the XSM terminal input provide polling based input?
Yes, readi statement provided in SPL gives polling based terminal I/O. But readi statement only works 
in debug mode. Write operation is always asynchronous.





Q1:
niranjan@niranjan-Victus:~/myexpos/xsm$ ./xsm --debug
enter name
e1to100.xsm
Previous instruction at IP = 10240: BRKP
Mode: KERNEL     PID: 1
Next instruction at IP = 10242, Page No. = 20: MOV R0,SP
debug> dst
Status: 0
Load/Store Bit: 
Page Number: 
Block Number: 
PID: 
debug> c
Previous instruction at IP = 10846: BRKP
Mode: KERNEL     PID: 1
Next instruction at IP = 10848, Page No. = 21: IRET
debug> dst
Status: 0
Load/Store Bit: 0
Page Number: 76
Block Number: 69
PID: 1
debug> c
2
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90
92
94
96
98
100
Machine is halting.
niranjan@niranjan-Victus:~/myexpos/xsm$



