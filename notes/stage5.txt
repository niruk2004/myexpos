XSM Debugging:



XSM Simulator:
The XSM (eXperimental String Machine) Simulator is used to simulate the XSM hardware.

Within your XSM directory, use the following command to run the simulator:

          ./xsm [--timer #1] [--disk #2] [--console #3] [--debug] 


(i) Syntax : --timer value
Semantics : This flag sets the number of user mode instructions after which timer interrupt is triggered to the 
value specified. --timer 0 disables the timer. The range of value is from 0 to 1024. Default Value : 20

(ii) Syntax : --disk value
Semantics : This flag sets the number of user mode instructions after which the disk interrupt is triggered to 
the value specified. The range of value is from 20 to 1024. Note that count begins only after a LOAD or STORE 
machine instruction gets executed. Default Value : 20

(iii) Syntax : --console value
Semantics : This flag sets the number of user mode instructions after which console interrupt is triggered to 
the value specified. The range of value is from 20 to 1024. Note that count begins only after a IN machine 
instruction gets executed. Default Value : 20

(iv) Syntax : --debug
Semantics : This flag sets the machine into DEBUG mode when it encounters a BRKP machine instruction. Any 
BRKP instruction in the program will be ignored by the machine if this flag is not set. The machine 
instruction INI gets enabled only in DEBUG mode. 



The --debug flag is used to debug the running machine. When this flag is set and the machine encounters a 
breakpoint instruction, the machine enters the DEBUG mode. In this mode a prompt is displayed which allows 
the user to enter commands to inspect the state of the machine. 

There are many commands which are used in debug mode :
    step (s): The execution proceeds by a single step.
    s <N> : to proceed by N steps
    c : continue to next BRKP.
    c <N> :  continue to next Nth occurrance of BRKP.
    r :  display all the register values.
    e :  Exits the debug prompt and halts the machine.
    .
    .
    etc

eg:
mem1
This will write the contents of memory page 1 to the file mem inside the xsm folder (if xsm is run from any 
other directory then the file mem will be created in that directory). Open this file and view the contents. 

In stage5 we just did a debugging demo using a program which prints odd numbers from 1 to 10. inside the while 
loop we put a breakpoint and it helped in understanding how the breakpoint works during debugging.

The below was the code that we used:

alias counter R0;
counter = 0;
while(counter <= 10) do
  if(counter%2 != 0) then
    breakpoint;
  endif;
  counter = counter + 1;
endwhile;

