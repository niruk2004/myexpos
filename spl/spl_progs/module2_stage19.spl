alias functionNum R1;

//Get free page
if(functionNum==1) then 
	
    //Incrementing WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1; 

    //No free memory available
	while([SYSTEM_STATUS_TABLE+2]==0) do

		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4]=WAIT_MEM;

		backup;
		call MOD_5;
		restore;		

	endwhile;

    //Decrementing WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1; 
    //Decrementing MEM_FREE_COUNT
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1; 

	alias i R3;
	i=0;
	while(i<128) do
		if([MEMORY_FREE_LIST+i]==0) then
			[MEMORY_FREE_LIST+i]=1;
			break;
		endif;
		i=i+1;
	endwhile;

	R0=i;
	
	return;

endif;



//Release page
if(functionNum==2) then 
	[MEMORY_FREE_LIST+R2]=[MEMORY_FREE_LIST+R2]-1;

	//Increment MEM_FREE_COUNT if no process is using that page
	if([MEMORY_FREE_LIST+R2]==0) then
		[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1; 

		//change wiatmem processes to ready
		alias i R4;
		i=0;
		while(i<16) do
			if([PROCESS_TABLE+16*i+4]==WAIT_MEM) then
				[PROCESS_TABLE+16*i+4]=READY;
			endif;
			i=i+1;
		endwhile;

	endif;
	return;
endif;

//release block
if(functionNum==4) then 

	alias block_no R2;
	[DISK_FREE_LIST+block_no]=[DISK_FREE_LIST+block_no]-1;
	return;

endif;

//getcodeppage
if (functionNum == 5) then

    alias blockNumber R2;
    alias currentPID R3;
    alias counter R4;
    alias process R5;
    alias flag R6;
    alias targetPage R7;

	currentPID = [SYSTEM_STATUS_TABLE + 1];

    process = 1;
    flag = 0;

    // search all processes' disk map entries
    while (process < 16) do
        counter = 4; // start at 4th disk map entry (code pages)

        // check current process's code page entries (entries 4-7)
        while (counter < 8) do
            // check if block matches disk map entry AND page table entry is valid
            if ([DISK_MAP_TABLE + process*10 + counter] == blockNumber && [[PROCESS_TABLE + process*16 + 14] + 8 + (counter - 4)*2] != -1) then
                flag = 1; //valid entry found
                break;
            endif;
            counter = counter + 1;
        endwhile;
        if(flag == 1) then
            break;
        endif;
        process = process + 1;
    endwhile;

    // calculate target page table entry address
    targetPage = [PROCESS_TABLE + process*16 + 14] + 8 + (counter - 4)*2;

    // if found valid shared code page 
    if (flag == 1 && ([targetPage + 1] == "0100" || [targetPage + 1] == "0101" || [targetPage + 1] == "0110" || [targetPage + 1] == "0111" || [targetPage + 1] == "1100" || [targetPage + 1] == "1101" || [targetPage + 1] == "1110" || [targetPage + 1] == "1111")) then 
        alias memoryPage R6;
        memoryPage = [targetPage];  // get existing memory page

        // increment free list count (shared page reference)
        [MEMORY_FREE_LIST + memoryPage] = [MEMORY_FREE_LIST + memoryPage] + 1;

        R0 = memoryPage; // return existing page
		return;

    // code page not in memory
    else
        alias memoryPage R6;
        // get new free page
        multipush(R0, R1, R2, R3, R4, R5);
        functionNum = 1;
        call MOD_2;
        memoryPage = R0;
        multipop(R0, R1, R2, R3, R4, R5);

        // load disk block to memory page
        multipush(R0, R1, R2, R3, R4, R5, R6);
        functionNum = 2;
        R4 = blockNumber;
        R2 = currentPID;
        R3 = memoryPage;
        call MOD_4;
        multipop(R0, R1, R2, R3, R4, R5, R6);

        R0 = memoryPage;
		return;
    endif;
endif;
