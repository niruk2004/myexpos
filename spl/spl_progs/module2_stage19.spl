alias functionNum R1;

//Get free page
if(functionNum==1) then 
	
    //Incrementing WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1; 

    //No free memory available
	while([SYSTEM_STATUS_TABLE+2]==0) do

		[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4]=WAIT_MEM;

		backup;
		call MOD_5;
		restore;		

	endwhile;

    //Decrementing WAIT_MEM_COUNT
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1; 
    //Decrementing MEM_FREE_COUNT
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1; 

	alias i R3;
	i=0;
	while(i<128) do
		if([MEMORY_FREE_LIST+i]==0) then
			[MEMORY_FREE_LIST+i]=1;
			break;
		endif;
		i=i+1;
	endwhile;

	R0=i;
	
	return;

endif;

//release block
if(functionNum==4) then 

	alias block_no R2;
	[DISK_FREE_LIST+block_no]=[DISK_FREE_LIST+block_no]-1;
	return;

endif;

//Release page
if(functionNum==2) then 
	[MEMORY_FREE_LIST+R2]=[MEMORY_FREE_LIST+R2]-1;

	//Increment MEM_FREE_COUNT if no process is using that page
	if([MEMORY_FREE_LIST+R2]==0) then
		[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1; 

		alias i R4;
		i=0;
		while(i<16) do
			if([PROCESS_TABLE+16*i+4]==WAIT_MEM) then
				[PROCESS_TABLE+16*i+4]=READY;
			endif;
			i=i+1;
		endwhile;

	endif;
	return;
endif;



//getcodeppage
if(functionNum==5) then
	
	alias currentPID R12;
	alias block_no R13;
	currentPID=R2;
	block_no=R3;

	alias i R4;
	alias disk_map R5;
	alias j R6;
	i=0;
	j=4;

	//Checking if the required block is already present as any code page for every process
	while(i<=15) do
		disk_map = DISK_MAP_TABLE + 10*i;
		
		while (j<8) do 
			if([disk_map+j]==block_no) then 
				if([PAGE_TABLE_BASE + i*20 + j*2]!=-1) then
					R0=[PAGE_TABLE_BASE + i*20 + j*2];
					[MEMORY_FREE_LIST+R0]=[MEMORY_FREE_LIST+R0]+1; //incrementng memory free list
					return;
				endif;
			endif;
		j = j + 1;
		endwhile ;

		i = i + 1;
	endwhile;

	
	//this is executed if code page was not found -  i.e we have to call getfreepage 
	//and use diskload and then return the memory page number to which it was loaded

		//calling getfreepage
		R1=1;
		call MOD_2;

		//calling Disk load
		R1=2; 
		R2=currentPID; 
		R3=R0; 
		R4=block_no;
		call MOD_4; 
		
	return;

endif;