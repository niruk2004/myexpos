//fork

//Set the MODE_FLAG 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;


//Switch to Kernel Stack 
alias userSP R13;
userSP=SP;

//switch to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;


//Allocate memory and set the Process Table

//Find a free Process Table entry by invoking the get_pcb_entry()
multipush(R13);
alias new_pid R14;
R1=1;
call MOD_1;
new_pid=R0;
multipop(R13);

//returning -1 if no entry is available
if(new_pid==-1) then
  [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = -1;
   
  //change to user stack
  SP = userSP;

  //reset mode flag
  [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

  ireturn;
endif;


//heap CHECK and Allocation
if([PTBR+4]==-1) then

	backup;
	R1 = 1;
	call MOD_2;
	[PTBR + 4] = R0;
	[PTBR + 5] = "0110";
	

	R1 = 1;
	call MOD_2;
	[PTBR + 6] = R0;
	[PTBR + 7] = "0110";
	restore;

endif;

//Invoke the get_free_page() function in Memory Manager module to obtain 3 
//memory pages: 2 for user stack and 1 for User Area Page of the child process.

alias new_PTBR R15;
new_PTBR=PAGE_TABLE_BASE+new_pid*20;

//Stack

backup;
R1=1;
call MOD_2;
[new_PTBR+16]=R0;
[new_PTBR+17]=[PTBR+17];

R1=1;
call MOD_2;
[new_PTBR+18]=R0;
[new_PTBR+19]=[PTBR+19];
restore;


//Allocating user area page
backup;
R1=1;
call MOD_2;
[PROCESS_TABLE+16*new_pid+11]=R0;
restore;


//Copy the parent's Process Table Entry except TICK, PID, PPID, USER AREA PAGE NUMBER, 
//KERNEL STACK POINTER, INPUT BUFFER, PTBR and PTLR to the child. Set the PPID field 
//of child process to the current PID. Also set User Area Page Number to the new UA 
//Page, MODE, TICK and Kernel Stack Pointer to 0. 

alias ind R9;
ind = PROCESS_TABLE + 16*new_pid;

//TICK field to 0
[ind + 0]=0;

//pid is initialized by the getpcb function (ind + 1)

//PPID of child
[ind + 2]=[SYSTEM_STATUS_TABLE + 1];

//copy user id
[ind + 3]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 3];

//State of child
[ind + 4]=CREATED;

//copy swap flag 
[ind + 6]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 6];

//copy inode index
[ind + 7]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 7];

//input buffer need not be initialized for the child process! (ind + 8)

//mode flag to 0
[ind + 9]=0;

//copy user area swap status
[ind + 10]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 10];

//user area page is already done  (ind + 11)

//KPTR to 0
[ind + 12]=0;

//copy UPTR
[ind + 13]=[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 13];

//ptbr and ptlr is also initialized by the get_pcb_entry function (ind + 14 and ind + 15)


//per process resource table is copied
ind=496;
while(ind<512) do

	[ [PROCESS_TABLE+16*new_pid+11]*512 + ind]=[[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512 + ind];	
    [ [PROCESS_TABLE+16*new_pid+11]*512 + ind + 1]=[[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+11]*512 + ind + 1];

	//if it is a file we have to increase the number of open instance count
	if([[PROCESS_TABLE+16*new_pid+11]*512 + ind]==FILE) then

		//find the open file index
		alias open_file_index R10;
		open_file_index = [[PROCESS_TABLE+16*new_pid+11]*512 + ind+1];

		//incrementing  the open instance count
		[OPEN_FILE_TABLE+4*open_file_index+1] = [OPEN_FILE_TABLE+4*open_file_index+1]+1;

	endif;

    //if it is a semaphore update the process count in the semaphore table
    if ([[PROCESS_TABLE + (new_pid*16 + 11)]*512 + ind] == 1) then 
            [SEMAPHORE_TABLE + [[PROCESS_TABLE + (new_pid*16) + 11]*512 + ind + 1]*4 + 1] = [SEMAPHORE_TABLE + [[PROCESS_TABLE + (new_pid*16) + 11]*512 + ind + 1]*4 + 1] + 1;
    endif;

	ind=ind+2;

endwhile;


//copying per process disk map table from parent to child
ind = 0;
while (ind < 10) do 
	[DISK_MAP_TABLE + (new_pid*10) + ind] = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE+1]*10) + ind];
	ind = ind + 1;
endwhile;


//Setting up page table entries (sharing pages)
//Copying library,heap and code.

ind=0;
while(ind<16) do
	[new_PTBR+ind]=[PTBR+ind];
    [new_PTBR+ind+1]=[PTBR+ind+1];
	if ([new_PTBR + ind] != -1) then //incrementing mem free list 
            [MEMORY_FREE_LIST + [new_PTBR + ind]] = [MEMORY_FREE_LIST + [new_PTBR + ind]] + 1;
        endif;
	ind=ind+2;
endwhile;


//copying parent user stack to child user stack
alias parent_stack R8;
alias child_stack R7;

parent_stack =  [PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+16];
child_stack = [PAGE_TABLE_BASE+new_pid*20+16];
ind=0;
while(ind<512) do
	[child_stack*512+ind] = [parent_stack*512+ind];
	ind=ind+1;
endwhile;

parent_stack =  [PAGE_TABLE_BASE+[SYSTEM_STATUS_TABLE+1]*20+18];
child_stack = [PAGE_TABLE_BASE+new_pid*20+18];
ind=0;
while(ind<512) do
	[child_stack*512+ind] = [parent_stack*512+ind];
	ind=ind+1;
endwhile;




//Storing BP on top of kernel stack of newly created process
[[PROCESS_TABLE+16*new_pid+11]*512] = BP;

//Setting up return values in user stacks of parent and child

//parent -then it is the pid of child
[( [PTBR+ 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]= new_pid;


//child -then it is 0
[([new_PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)]=0;


//reset the mode flag of parent process
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;


//changing back to user stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13];

ireturn;