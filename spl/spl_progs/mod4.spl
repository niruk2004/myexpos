//device manager

alias functionNum R1;
alias currentPID R2;

//Disk Store function
if(functionNum==1) then 
	alias page_no R3;
	alias block_no R4;
	backup;
		R1=3;
		R2=currentPID;
		call MOD_0;
	restore;

    //Setting load/store bit to store(1)
	[DISK_STATUS_TABLE+1]=1; 
	[DISK_STATUS_TABLE+2]=page_no;
	[DISK_STATUS_TABLE+3]=block_no;

	store(page_no,block_no);
	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;

	backup;
	call MOD_5;
	restore;

	return;
endif;

//disk load
if(functionNum==2) then

    alias pagenum R3;
    alias blocknum R4;

    //aquire the disk
    backup;
    R1 = 3;
	//PID IS ALR IN R2
    call MOD_0;
    restore;

    //disk table entries (load -> 0 , pagenum, blocknum )
	[DISK_STATUS_TABLE+1]=0;
	[DISK_STATUS_TABLE+2]=pagenum; 
	[DISK_STATUS_TABLE+3]=blocknum;

	load(pagenum,blocknum);

    //setting the state to wait_Disk for the process
	[PROCESS_TABLE + (currentPID*16) + 4] = WAIT_DISK;	

	//changing process since we are waiting for the transfer to complete
	backup;
	call MOD_5; 
	restore;

	return;
endif;

//terminal write
if(functionNum==3) then
	
	backup;

	R1=8;
	R2=currentPID;
	call MOD_0;

    //Ignore the value present in R0 as Acquire Terminal does not have any return value.

    restore;

	//Terminal Acquired

	alias word R3;
	print word;

	//Releasing terminal

	backup;

	R1=9;
	R2=currentPID;
	call MOD_0;

    //Return value will be stored in R0 by module 0. Save this return value in any other register if needed.
    //we need not save this for now since we wont be using it anywhere for now.

	restore;

	return;

endif;

//terminal read
if(functionNum==4) then
	
	backup;

	R1=8;
	R2=currentPID;

	call MOD_0;

    //Ignore the value present in R0 as Acquire Terminal does not have any return value.

    restore;

	//Terminal Acquired

    read;

    [PROCESS_TABLE + (currentPID*16) + 4] = WAIT_TERMINAL;

	//Releasing terminal

	backup;

    //calling scheduler
    call MOD_5;

	restore;

    alias physicalPageNum R4;
    alias offset R5;
    alias PhysicalAddr R6;
    physicalPageNum = [PTBR + 2 * ((R3)/ 512)];
    offset = (R3) % 512;
    PhysicalAddr = (physicalPageNum * 512) + offset;
    [PhysicalAddr] = [PROCESS_TABLE + (currentPID*16) + 8];
	return;

else

    return;

endif;
return;