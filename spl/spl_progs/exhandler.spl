[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = -1; //setting mode flag to -1

// rewriting the SP to kernel stack base
alias userSP R5;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
userSP = SP;
// set the value of SP to the beginning of User Area Page
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

backup;
multipush(EIP);

if(EC != 0 || userSP == PTLR*512 - 1) then 
    if (userSP == PTLR*512 - 1) then
        print "Stack Overflow";
    else
        if(EC == 1) then
            print "INSTR_ERR";
        endif;
        if(EC == 2) then
            print "MEM_ERR";
        endif;
        if(EC == 3) then
            print "ARITH_ERR";
        endif;
    endif;

    //breakpoint;

    // exit the process and call the scheduler
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    call MOD_5;
else
    //breakpoint;
    if(EPN >= 4 && EPN < 8) then // the page fault cause is at code page
        // call Get Code Page from memory manager -> return value is in R0
        multipush(EPN);
        R1 = 5;
        R2 = [DISK_MAP_TABLE + ([SYSTEM_STATUS_TABLE+1]*10) + EPN]; 
        R3 = [SYSTEM_STATUS_TABLE+1];
        call MOD_2;
        multipop(EPN);

        // set the page table to the one Get Code Page and set the aux info to 1100
        [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + 2*EPN] = R0;
        [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE+1]*20 + 2*EPN + 1] = "1100";
    else //pagefault caused by heap page
        // call the Get Free Page twice and set to the heaps
        multipush(R0, R1, R2, R3, R4, R5);
        R1 = 1;
        call MOD_2;
        [PTBR + 4] = R0; // set to return value
        [PTBR + 5] = "1110"; // set aux info

        R1 = 1;
        call MOD_2;
        [PTBR + 6] = R0;
        [PTBR + 7] = "1110";
        multipop(R0, R1, R2, R3, R4, R5);
    endif;
endif;

multipop(EIP);
restore; // restore registers from kernel stack

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13]; //load sp from word 13 of process table
SP = SP+1;
[[PTBR + 2*(SP/512)]*512 + SP%512] = EIP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 9] = 0; //setting mode flag to 0

ireturn;