alias functionNum R1;  

//aquire disk
if(functionNum==3) then 
    alias currentPID R2;
	//as long as the process requires the disk we keep on scheduling different processes
	while( ([DISK_STATUS_TABLE] ) == 1) do
		[ (PROCESS_TABLE + (currentPID * 16)) + 4 ] = WAIT_DISK;

		backup;
		call MOD_5;
		restore;

	endwhile;

    // update disk accesses
    multipush(R0);
    alias diskAccesses R0;
    diskAccesses = SYSTEM_STATUS_TABLE + 26;
    [diskAccesses] = [diskAccesses] + 1;
    multipop(R0);


	//when we came out of the while loop that means the disk is now free so now the current process aquires it
	[DISK_STATUS_TABLE]=1; 
	[DISK_STATUS_TABLE+4]=currentPID;
	
	return;

endif;

//aquire semaphore
if(functionNum == 6) then
    alias currentPID R2; //no use rn tbh
    alias sem_index R14;
	alias i R13;
	sem_index=-1;
	i=0;
	while(i<MAX_SEM_COUNT) do
		if([SEMAPHORE_TABLE+i*4+1]==0) then
			sem_index=i;
			break;
		endif;
		i=i+1;
	endwhile;

	if(sem_index==-1) then
		R0=-1;
		return;
	endif;

    //Setting Locking PID field to -1
	[SEMAPHORE_TABLE+sem_index*4+0]=-1;

    //Setting PROCESS_COUNT field to 1
	[SEMAPHORE_TABLE+sem_index*4+1]=1;

	R0 = sem_index;
	return;

endif;

//release semaphore
if(functionNum==7) then
    alias sem_index R2;
    alias currentPID R3;

	if(sem_index<0 || sem_index>=32) then
		R0=-1;
		return;
	endif;

	//checking if it was locked
	if([SEMAPHORE_TABLE+4*sem_index+0]==[SYSTEM_STATUS_TABLE+1]) then

		//unlocking
		[SEMAPHORE_TABLE+4*sem_index+0]=-1;
		alias i R9;
		i=0;

		//changing all process waiting for that semaphore to ready
		while(i<=15) do

			if([PROCESS_TABLE+16*i+4]==WAIT_SEMAPHORE && 
				[PROCESS_TABLE+16*i+5]==sem_index) then

				[PROCESS_TABLE+16*i+4]=READY;
			endif;
			i=i+1;
		endwhile;

	endif;

	//decrementing the number of processes accessing the semaphore by 1
	[SEMAPHORE_TABLE+4*sem_index+1]=[SEMAPHORE_TABLE+4*sem_index+1]-1;

	R0=0;
	return;
    
endif;


//acquire terminal
if(functionNum==8) then 
	alias currentPID R2;
	while( ([TERMINAL_STATUS_TABLE] ) == 1) do

		[ (PROCESS_TABLE + (currentPID * 16)) + 4 ] = WAIT_TERMINAL;
		backup;
		call MOD_5;
		restore;

	endwhile;

	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;

endif;

//release terminal
if(functionNum==9) then
    alias currentPID R2;
	if([TERMINAL_STATUS_TABLE + 1] == currentPID) then

		[TERMINAL_STATUS_TABLE] = 0;

        //waking up all the processes which are in WAIT_TERMINAL state
		alias i R6;
		i=0;
		while(i<=15) do
			if([PROCESS_TABLE+16*i+4] == WAIT_TERMINAL) then
				[PROCESS_TABLE+16*i+4]=READY;
			endif;
			i=i+1;
		endwhile;

		R0=0;
		return;

	else
        //we tried to release terminal when it was not even acquired by the current process in the first place
		R0=-1;
		return;

	endif;
endif;