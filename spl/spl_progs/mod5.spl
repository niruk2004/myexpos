alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];


multipush(BP);


alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


//finding the new process

alias newPID R2;
newPID=0;

//check if paging is ongoing
if ([SYSTEM_STATUS_TABLE+5] != 0) then

    if ([PROCESS_TABLE + 15*16 + 4] == WAIT_DISK) then
        newPID = 0;
    else
        newPID = 15;
    endif;

else
	//swapper deamon is excluded
	alias tempPID R10;
	tempPID=currentPID+1;
	while(tempPID<15) do
		if(([ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == READY || [ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == CREATED ) &&  [PROCESS_TABLE + tempPID*16 + 6] != 1) then
			newPID=tempPID;
			break;
		endif;
		tempPID=tempPID+1;
	endwhile;

	if (newPID == 0) then
		tempPID=0;
		while(tempPID<currentPID) do
		if(([ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == READY || [ (PROCESS_TABLE + (tempPID * 16)) + 4 ] == CREATED ) &&  [PROCESS_TABLE + tempPID*16 + 6] != 1) then
			newPID=tempPID;
			break;
		endif;
		tempPID=tempPID+1;
		endwhile;
	endif;
endif;

alias new_process_table R13;
new_process_table = PROCESS_TABLE + newPID * 16;


SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

//assigning new pid
[SYSTEM_STATUS_TABLE + 1] = newPID;


if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
    BP = [[new_process_table + 11] * 512 ];
    [new_process_table + 9] = 0;
	ireturn;
    
endif;

[new_process_table + 4] = RUNNING;
multipop(BP);
return;