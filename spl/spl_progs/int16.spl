//newusr,remusr,setpwd,getuname.getuid

alias userSP R0; 
alias sys_call_no R4;
alias user_id R5;
alias physicalAddrRetVal R6;
alias username R7;
alias check R8;
alias i R9;
alias password R10;
alias prcss_table_start R11;
alias arg1 R12;
alias arg2 R13;
alias currPID R14;

userSP=SP; //Saving value of user stack

currPID=[SYSTEM_STATUS_TABLE+1];

//take the two arguments' address (taking only address since for some functions its username for some its userid)
arg1 = ([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + (userSP - 4) % 512;
arg2 = ([PTBR + 2 * ((userSP - 3)/ 512)] * 512) + (userSP - 3) % 512;

//getting the prcss_table_start
prcss_table_start = PROCESS_TABLE + (currPID * 16);

//Switching to kernel stack
[prcss_table_start + 13] = SP; //Saving sp value in UPTR field
SP = [prcss_table_start + 11] * 512 - 1; //Setting up kernel stack

//get the sys call number
sys_call_no = [([PTBR + 2 * ((userSP - 5)/ 512)] * 512) + (userSP - 5) % 512];

//getting the return address
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);

//Set mode flag to syscall number that we extracted (assuming there wont be any problems assigning it early on :D)
[prcss_table_start + 9] = sys_call_no;


//newusr
if(sys_call_no==22) then
	
	//Mode flag has already been set earlier

	user_id = [prcss_table_start+3];

	//If current user is not root or if current process is not shell (as only the root user can add or remove other users)

	if(user_id!=1 || currPID!=2) then

		[physicalAddrRetVal] = -2;

		//reset mode flag
		[prcss_table_start + 9] = 0;

		//change to user stack
		SP = userSP;

		ireturn;
	endif;

	//Extracting username (argument 1)
	username = [arg1];

	//Extracting Password(argument 2)
	password = [arg2];

	// Checking if given username is alredy taken
	check=-1;
	i=0;
	while(i<16) do
		if([USER_TABLE+ 2*i] == username) then
			check=0;
			break;
		endif;
		i=i+1;
	endwhile;

	// if username already exists, return -1;
	if(check==0) then

		[physicalAddrRetVal] = -1;

		//reset mode flag
		[prcss_table_start + 9] = 0;

		//change to user stack
		SP = userSP;

		ireturn;
	endif;

	//finding free entry in the user table
	check=-1;
	i=0;
	while(i<16) do
		if([USER_TABLE+2*i]==-1) then
			check=i;
			break;
		endif;
		i=i+1;
	endwhile;

	//If user table is full return -3
	if(check==-1) then

		[physicalAddrRetVal] = -3;

		//reset mode flag
		[prcss_table_start + 9] = 0;

		//change to user stack
		SP = userSP;

		ireturn;
	endif;

	//Encrypt the password
	encrypt password;

	//Set the user table entries
	[USER_TABLE+2*check]=username;
	[USER_TABLE+2*check+1]=password;

	//reset mode flag
	[prcss_table_start + 9] = 0;

	//return 0
	[physicalAddrRetVal] = 0;

	SP = [prcss_table_start + 13];
	ireturn;

endif;



//remusr
if(sys_call_no==23) then

	//mode flag alr set earlier

    //getting the user id
	user_id = [prcss_table_start+3];

	//Extracting username
	username = [arg1];

	//if the user is not root or if the process is not shell or if the user that you want to remove is root or kernel, return -2
	if(user_id!=1 || currPID!=2 || username=="root" || username == "kernel") then

		[physicalAddrRetVal] = -2;

		//reset mode flag
		[prcss_table_start + 9] = 0;

		//change to user stack
		SP = userSP;

		ireturn;
	endif;

	// Checking if a user exists in user-table with given username
	i=0;
	check=-1;
	while(i<16) do
		if([USER_TABLE+2*i]==username) then
			check=i;
			user_id=i;
			break;
		endif;
		i=i+1;
	endwhile;

	//If the username is not found return -1;
	if(check==-1) then

		[physicalAddrRetVal] = -1;

		//reset mode flag
		[prcss_table_start + 9] = 0;

		//changing back to user stack
		SP = userSP;

		ireturn;
	endif;


	//if there are files owned by the user we are going to delete, then return -3 indicating undeleted files exist for the user
	i=0;
	check=-1;
	while(i<60) do
		if([ROOT_FILE+8*i+3]==username) then
			check=0;
			break;
		endif;	
		i=i+1;
	endwhile;

	if(check==0) then

		[physicalAddrRetVal] = -3;

		//reset mode flag
		[prcss_table_start + 9] = 0;

		//change to user stack
		SP = userSP;

		ireturn;
	endif;


	//Invalidate the user table entry by setting both felds to -1
	[USER_TABLE+2*user_id]=-1;
	[USER_TABLE+2*user_id+1]=-1;

	//reset mode flag
	[prcss_table_start+ 9] = 0;

	//return 0
	[physicalAddrRetVal] = 0;

	SP = [prcss_table_start + 13];
	ireturn;

endif;

//setpwd
if(sys_call_no==24) then
	
	//mode flag done earlier
	
    //return -1 if its not shell. this is done along with the check of userid of user 
    //with userid of process to avoid extra lines of code to make sure that the xsm 
    //instructions does not exceed 2 blocks


	//Extracting username (argument 1)
	username = [arg1];

	//Extracting Password (argument 2)
	password = [arg2];

	//Finding the entry corresponding to username
	i=0;
	user_id=-1;
	while(i<16) do
		if([USER_TABLE+2*i]==username) then
			user_id=i;
			break;
		endif;
		i=i+1;
	endwhile;

	//if entry not fuond then return -2
	if(user_id==-1) then
		[physicalAddrRetVal] = -2;

		//reset mode flag
		[prcss_table_start + 9] = 0;
		
		//change to user stack
		SP = userSP;

		ireturn;
	endif;

	// if current process is not shell or if user tries to change some other user's password
	// and if he is not root then return -1
	if(currPID!=2 || (([prcss_table_start+3]!=user_id) && ([prcss_table_start+3]!=1))) then

		[physicalAddrRetVal] = -1;
		//reset mode flag
		
        //reset mode flag
		[prcss_table_start + 9] = 0;

		//change to user stack
		SP = userSP;

		ireturn;
	endif;

	//change the current password by putting the new password after encrypting it
	encrypt password;
	[USER_TABLE+2*user_id+1]=password;

	//restoring mode flag
	[prcss_table_start + 9] = 0;

	//Setting return value to 0
	[physicalAddrRetVal] = 0;

	SP = [prcss_table_start + 13];
	ireturn;

endif;

//getuname
if(sys_call_no==25) then
	
	//mode flag set earlier

	//Extracting userId (argument 1)	
	user_id = [arg1];

	//check validity of the user id
	if(user_id<0 || user_id>15) then

		[physicalAddrRetVal] = -1;

		//reset mode flag
		[prcss_table_start + 9] = 0;

		//change to user stack
		SP = userSP;

		ireturn;
	endif;

	//if the usertable entry corresponding to the given user id is invalid, return -1
	if([USER_TABLE+2*user_id]==-1) then

		[physicalAddrRetVal] = -1;
        
		//reset mode flag
		[prcss_table_start + 9] = 0;

		//changing back to user stack
		SP = userSP;

		ireturn;
	endif;

	//Extract username from user table
	username = [USER_TABLE+2*user_id];

	//reset mode flag
	[prcss_table_start+ 9] = 0;

	//return username
	[physicalAddrRetVal] = username;

    //switch to user stack
	SP = [prcss_table_start + 13];
	ireturn;

endif;

//getuid
if(sys_call_no==26) then
	
    //mode flag already set earlier

	//Extracting username (argument 1)
	username = [arg1];

	// Loop to find userid corresponding to given username
    user_id=-1;
	i=0;
	while(i<16) do
		if([USER_TABLE+2*i]==username) then
			user_id=i;
			break;
		endif;
		i=i+1;
	endwhile;

	//reset mode flag
	[prcss_table_start + 9] = 0;

	//return user id
	[physicalAddrRetVal] = user_id;

    //switch to user stack
	SP = [prcss_table_start + 13];
    
	ireturn;
endif;