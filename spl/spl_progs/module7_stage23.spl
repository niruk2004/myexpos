//exception
loadi(2, 15);
loadi(3, 16);

//inode table
loadi(59,3);
loadi(60,4);

//disk map table
loadi(61,2);

//root file
loadi(62,5);

//timer
loadi(4, 17);
loadi(5, 18);

//console_interrupt
loadi(8,21);
loadi(9,22);

//int4
loadi(10,23);
loadi(11,24);

//int6
loadi(14,27);
loadi(15,28);

//int7
loadi(16,29);
loadi(17,30);

//int8
loadi(18,31);
loadi(19,32);

//int9
loadi(20,33);
loadi(21,34);

//halt or int10
loadi(22,35);
loadi(23,36);

//int_11
loadi(24,37);
loadi(25,38);

// int 13
loadi(28, 41);
loadi(29, 42);

// int 14
loadi(30, 43);
loadi(31, 44);

//int_15
loadi(32,45);
loadi(33,46);

//scheduler
loadi(50,63);
loadi(51,64);

//library
loadi(63,13);
loadi(64,14);

//init
loadi(65,7);
loadi(66,8);

//module 0
loadi(40,53);
loadi(41,54);

//module 1
loadi(42,55);
loadi(43,56);

//module 2
loadi(44,57);
loadi(45,58);

//module 4
loadi(48,61);
loadi(49,62);

//disk interrupt handler
loadi(6,19);
loadi(7,20);

//initialising disk status table
[DISK_STATUS_TABLE + 0] = 0;


//initializing Terminal status table

[TERMINAL_STATUS_TABLE + 0] = 0;

//setting process table state to terminated
multipush(R0);
alias i R0;
i = 0;
while(i<16) do
    [PROCESS_TABLE + 16*i + 4] = TERMINATED;
    i = i + 1;
endwhile;

//initialising memory free list

//as effective free page start from 83 (we used some for idle and init process) and upto 127
i = 0;

while(i < NUM_MEM_PAGES) do
    if(i < 83) then
        [MEMORY_FREE_LIST + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif;
    i = i + 1;
endwhile;

//initialising system status table

[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;

multipop(R0);
//init_page_Table

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


//pid_for_init
[PROCESS_TABLE + 16 + 1] = 1;

//init_process_gets_Scheduled_first

[PROCESS_TABLE + 16 + 3] = 1;

[PROCESS_TABLE + 16 + 4] = CREATED;

//user_area_page
[PROCESS_TABLE + 16 + 11] = 80;

//KPTR_for_init
[PROCESS_TABLE + 16  + 12] = 0;

//UPTR_for_init
[PROCESS_TABLE + 16  + 13] = 8*512;

//PTBR_for_init
[PROCESS_TABLE + 16 + 14] = PTBR;

//PTLR_for_init
[PROCESS_TABLE + 16 + 15] = PTLR;


[ 76 * 512 ] = [65 * 512 + 1];


//initialising per process table of init process
alias perProcessTable R1;
perProcessTable = ([PROCESS_TABLE + 16 + 11] + 1) * 512 - 16;

i=0;
while(i<16) do
    [perProcessTable + i] = -1;
    i = i + 1;
endwhile;

//initializing disk map table for init process

i=0;
while(i<10) do
    if(i > 3 && i < 6) then
        [DISK_MAP_TABLE + 10 + i] = [PTBR + 2*i];
    else
        [DISK_MAP_TABLE + 10 + i] = -1;
    endif;
    i = i + 1;
endwhile;

//initializing semaphore table entry

i=0;
while(i<MAX_SEM_COUNT) do
    [SEMAPHORE_TABLE + 4 * i] = -1;
    [SEMAPHORE_TABLE + 4 * i + 1] = 0;
    i = i + 1;
endwhile;

//initializing file status table

i=0;
while(i < MAX_FILE_NUM) do
    [FILE_STATUS_TABLE + 4 * i] = -1;
    [FILE_STATUS_TABLE + 4 * i + 1] = -1;
    i = i + 1;
endwhile;

//initialising buffer table

i=0;
while(i < MAX_BUFFER) do
    [BUFFER_TABLE + 4 * i] = -1;
    [BUFFER_TABLE + 4 * i + 1] = 0;
    [BUFFER_TABLE + 4 * i + 2] = -1;
    i = i + 1;
endwhile;
return;