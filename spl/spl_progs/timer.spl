[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
backup;


// check if swapping is initiated
//check the paging status
if ([SYSTEM_STATUS_TABLE+5] != 0) then  
    //its either idle or its the swapper , if its idle then it probably got scheduled while the swapper is blocked by the load .
    //if its the swapper then we call the pager module with the swap in /out as the argument
    if ([SYSTEM_STATUS_TABLE+1] == SWAPPER_DAEMON) then 
        R1 = [SYSTEM_STATUS_TABLE+5];
        R2 = [SYSTEM_STATUS_TABLE+1];
        call MOD_6;
    endif;

//checking if there is a need to swap in or swap out
else
    // check if we need to swap out
    if ([SYSTEM_STATUS_TABLE+2] < MEM_LOW) then 
        [SYSTEM_STATUS_TABLE+5] = SWAP_OUT;
    else
        // check if we need to swap in
        //we only need to swap in if there is some page swapped out
        if ([SYSTEM_STATUS_TABLE+4] > 0) then

            //check if mem free count > MEM_HIGH
            if ([SYSTEM_STATUS_TABLE+2] > MEM_HIGH) then
                [SYSTEM_STATUS_TABLE+5] = SWAP_IN;
            else
                alias counter R0;
                counter = 0;

                //set paging status to swap in if any of the process exceeds the tick limit
                while (counter < MAX_PROC_NUM) do
                    if ([PROCESS_TABLE + counter*16 + 6] == 1 && [PROCESS_TABLE + counter*16 + 0] > MAX_TICK) then
                        [SYSTEM_STATUS_TABLE+5] = SWAP_IN;
                        break;
                    endif;
                    counter = counter+1;
                endwhile;

            endif;

        endif;

    endif;

endif;


[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = READY;

//Loop through the process table entires and increment the TICK field of each process.
alias i R15;
i = 0;
while (i < MAX_PROC_NUM) do
    [PROCESS_TABLE + i*16 + 0] = [PROCESS_TABLE + i*16 + 0] + 1; 
    i = i+1;
endwhile;

//calling scheduler
call MOD_5;

restore;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9] = 0;



ireturn;