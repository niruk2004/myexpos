//create and delete 

alias userSP R0; 
alias Num R1;
alias process_table_start R2;
alias inode_table_start R3;
alias sys_call_no R4;
alias filename R5;
alias permission R6;
alias i R7;
alias inode_free_entry R8;
alias physicalAddrRetVal R9;
alias root_file_index R10;
alias inode_index R11;
alias j R12;
alias buffer_number R13;

userSP = SP;
//Switching to kernel stack
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP; 
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//get the Syscall number
sys_call_no=[([PTBR + 2 * ((userSP - 5)/ 512)] * 512) + (userSP - 5) % 512];

//Return address
physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);

//file name
filename = [([PTBR + 2 * ((userSP - 4)/ 512)] * 512) + (userSP - 4) % 512];

//CREATE system call
if(sys_call_no==1) then

	//mode flag
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 1;

	//get the permission (exclusive (0) / open accesss (1))
	permission = [([PTBR + 2 * ((userSP - 3)/ 512)] * 512) + (userSP - 3) % 512];

	//check if the file is alr present in the inode table
	i=0;
	while(i<60) do
		if([INODE_TABLE+16*i+1]==filename) then
			//return 0 to indicate success/file alr present
			[physicalAddrRetVal] = 0;

			//reset mode flag
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

			//changing to user stack
			SP = userSP;
			ireturn;

		endif;
		i=i+1;
	endwhile;

	//Finding free entry in inode table
	inode_free_entry=-1;
	i=0;
	while(i<60) do
		if([INODE_TABLE+16*i+1]==-1) then
			inode_free_entry=i;
			break;
		endif;
		i=i+1;
	endwhile;

    //FAILURE (no free entry in inode table)
	if(inode_free_entry==-1) then
		//return -1 
		[physicalAddrRetVal] = -1;

		//reset mode flag
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		
		//change to user stack
		SP = userSP;

		ireturn;
	endif;

	inode_table_start = INODE_TABLE+16*inode_free_entry;
	process_table_start = PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1];

	//set inode table entries
	[inode_table_start+1]=filename; //filename
	[inode_table_start+2]=0; //filesize
	[inode_table_start+0]=DATA; //filetype

	//Setting block numbers to -1 (Indicating no disk blocks are allocated for the file)
	i=8;
	while(i<=11) do
		[inode_table_start+i]=-1;
		i=i+1;
	endwhile;

	//Setting userID and permission in inode table
	[inode_table_start+3]=[process_table_start+3]; //userid
	[inode_table_start+4]=permission; //permission

	//setting root file entries
	root_file_index = inode_free_entry;
	[ROOT_FILE+8*root_file_index+0] = filename;  //File name
	[ROOT_FILE+8*root_file_index+1] = 0; //File Size
	[ROOT_FILE+8*root_file_index+2] = DATA; //File type

	//Setting username and permission in rootfile
	Num = [process_table_start+3];
	[ROOT_FILE+8*root_file_index+3]=[USER_TABLE + 2*Num+3]; //username
	[ROOT_FILE+8*root_file_index+4] = permission; //Permission

	//Change to user stack
	SP = [process_table_start + 13];

	//reset mode flag
	[process_table_start + 9] = 0;

	//return 0
	[physicalAddrRetVal] = 0;

	ireturn;

endif;



//DELETE system call
if(sys_call_no==4) then
	
	//Set mode flag
	[process_table_start + 9] = 4;

	//find the inode table index
	i=0;
	inode_index=-1;
	while(i<60) do
		if([INODE_TABLE+16*i+1]==filename) then
			inode_index=i;
			break;
		endif;
		i=i+1;
	endwhile;

	if(inode_index==-1) then
		print "NotPresent";
		//return 0
		[physicalAddrRetVal] = 0;

		//reset mode flag
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

		//change to user stack
		SP = userSP;
		ireturn;
	endif;

	inode_table_start = INODE_TABLE+16*inode_index;
	process_table_start = PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1];

	if([inode_table_start+0]!=DATA) then
		print "NotDataFile";
		//return -1
		[physicalAddrRetVal] = -1;

		//reset mode flag
		[process_table_start + 9] = 0;

		//change to user stack
		SP = userSP;
		ireturn;
	endif;

	//check for permission
	if(([inode_table_start+4]==EXCLUSIVE) && ([process_table_start+3]!=1 &&
		[process_table_start+3]!=[inode_table_start+3]) ) then
		print "NoPermission";
		//return -1
		[physicalAddrRetVal] = -1;

		//reset mode flag
		[process_table_start + 9] = 0;

		//change to user stack
		SP = userSP;
		ireturn;
	endif;

	//ACQUIRING INODE
	backup;
		R1=4;
		R2=inode_index;
		R3=[SYSTEM_STATUS_TABLE+1]; 
		call MOD_0;	
	restore;


	if([FILE_STATUS_TABLE + inode_index*4 +1]!=-1) then
	print "fileOpenErr";
		//RELEASING INODE
		backup;
			R1=5; //Function number of Release inode in MOD_1
			R2=inode_index;
			R3=[SYSTEM_STATUS_TABLE+1]; //PID of current process
			call MOD_0;	
		restore;

		//return -2
		[physicalAddrRetVal] = -2;

		//reset mode flag
		[process_table_start + 9] = 0;

		//change to user stack
		SP = userSP;
		ireturn;
	endif;


	//Checking if disk blocks allocated to process are present in buffer
	i=8;
	while(i<=11) do

		//If the block in in buffer
		buffer_number = [inode_table_start+i]%MAX_BUFFER;

		//if the buffer contains the block of the file to be deleted and the dirty bit is 1 then set dirty to 0
		if([BUFFER_TABLE + 4*buffer_number + 0]== [inode_table_start+i]&& 
			[BUFFER_TABLE + 4*buffer_number + 1]==1) then
			[BUFFER_TABLE + 4*buffer_number + 1]=0;
		endif;

		//RELEASE BLOCK
		backup;
			R1=4;
			R2=[inode_table_start+i];
			R3=[SYSTEM_STATUS_TABLE+1];
			call MOD_2;	
		restore;
		i=i+1;
	endwhile;

	// invalidate the Inode table
	i = 0;
	while (i < 16) do
		[inode_table_start+i] = -1;
		i= i+ 1;
	endwhile;
	[inode_table_start+2] = 0; //size is 0 


	// invalidate the root file
	//inode index and root file index is same
	i = 0;
	while (i < 8) do
		[ROOT_FILE + 8*inode_index+i] = -1;
		i = i + 1;
	endwhile;
	[ROOT_FILE + 8*inode_index+1] = 0; //size is 0

	//RELEASING INODE
	backup;
		R1=5;
		R2=inode_index;
		R3=[SYSTEM_STATUS_TABLE+1]; 
		call MOD_0;	
	restore;

	//return 0
	[physicalAddrRetVal] = 0;

	//reset mode flag
	[process_table_start + 9] = 0;

	//change to user stack
	SP = userSP;
	ireturn;

endif;