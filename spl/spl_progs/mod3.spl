//file manager module

alias functionNum R1;

//buffer read (2) and buffer write (1)
if(functionNum==2 || functionNum==1) then

	alias block_no R12;
	alias offset R13;
	alias word R14;
	block_no=R2;
	offset=R3;
	word=R4;

    //get the buffer number 
	alias buffer_no R5;
	buffer_no = block_no%4;

    //aquire buffer
	backup;
		R1=1;
		R2=buffer_no;
        R3=[SYSTEM_STATUS_TABLE+1];
		call MOD_0;
	restore;

    //if buffer contains a different block
	if([BUFFER_TABLE+4*buffer_no+0]!=block_no) then

        //if the buffer content is dirty:
		if([BUFFER_TABLE+4*buffer_no+1]==1) then

            //calling disk store
			backup;
				R1=1;
				R2=[SYSTEM_STATUS_TABLE+1];
				R3=71+buffer_no;
				R4=[BUFFER_TABLE+4*buffer_no+0];
				call MOD_4;
			restore;

            //buffer is marked as clean
			[BUFFER_TABLE+4*buffer_no+1]=0;

		endif;

        //disk load is called
		backup;
			R1=2;
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=71+buffer_no;
			R4=block_no;
			call MOD_4;
		restore;

        //disk block number is set in the buffer
		[BUFFER_TABLE+4*buffer_no+0]=block_no;

	endif;

	//if it was buffered write
	if(functionNum==1) then
		//storing word in buffer block
		[(71+buffer_no)*512+offset]=word;
		//setting dirty bit as 1
		[BUFFER_TABLE+4*buffer_no+1]=1;
	endif;

	//if its buffered read
	if(functionNum==2) then
		//the contents in the offset location is copied to the memory location passed as argument
		[word] = [(71+buffer_no)*512+offset];

	endif;

    //buffer release is called
	backup;
		R1=2;
		R2=buffer_no;
        R3=[SYSTEM_STATUS_TABLE+1];
		call MOD_0;
	restore;

	return;	

endif;

//open 
if(functionNum==3) then

	alias filename R2;
	alias inode_index R3;
	alias i R4;
	alias open_file_index R5;
	i=0;
	inode_index=-1;
	while(i<60) do
		if([INODE_TABLE+16*i+1]==filename) then
			inode_index=i;
			break;
		endif;
		i=i+1;
	endwhile;

	if(inode_index==-1) then
		R0=-1;
		return;
	endif;

	//Acquiring inode
	backup;
		R1=4;
		R2=inode_index;
        R3=[SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		if(R0==-1) then
			restore;
			R0=-1;
			return;
		endif;
	restore;
	
	if([INODE_TABLE + 16*inode_index +0]==EXEC || [INODE_TABLE + 16*inode_index +1]!=filename) then
		//Release inode
		backup;
			R1=5;
			R2=inode_index;
            R3=[SYSTEM_STATUS_TABLE + 1];
			call MOD_0;
		restore;

		//Return -1
		R0=-1;
		return;
	endif;

	//Finding free entry in open_file_table
	i=0;
	open_file_index=-1;
	while(i<MAX_OPENFILE_NUM) do
		if([OPEN_FILE_TABLE + 4*i+0]==-1) then
			open_file_index=i;
			break;
		endif;
		i=i+1;
	endwhile;

	//If no free open file table entry found
	if(open_file_index==-1) then
		//Release inode
		backup;
			R1=5;
			R2=inode_index;
            R3=[SYSTEM_STATUS_TABLE + 1];
			call MOD_0;
		restore;

		//Return -2
		R0=-2;
		return;
	endif;

    //if filename is root then set inode index field to inode root (0)
	if(filename=="root") then
		[OPEN_FILE_TABLE+4*open_file_index+0]=INODE_ROOT;
	else
		if([FILE_STATUS_TABLE+4*inode_index+1]==-1) then
			[FILE_STATUS_TABLE+4*inode_index+1]=1;
		else
			[FILE_STATUS_TABLE+4*inode_index+1]=[FILE_STATUS_TABLE+4*inode_index+1]+1;
		endif;
        //set inode index field
		[OPEN_FILE_TABLE+4*open_file_index+0]=inode_index;
	endif;

    //open instance count is set to 1 and lseek is set to 0 in open file table
	[OPEN_FILE_TABLE+4*open_file_index+1]=1;
	[OPEN_FILE_TABLE+4*open_file_index+2]=0;

	//Release inode
	backup;
		R1=5;
		R2=inode_index;
        R3=[SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
	restore;

	R0=open_file_index;
	return;

endif;

//close 
if(functionNum==4) then
	
	alias open_file_index R2;

    //getting inode table index
	alias inode_index R3;
	inode_index = [OPEN_FILE_TABLE+4*open_file_index+0];

    //open instance count is decremented in the open file table
	[OPEN_FILE_TABLE+4*open_file_index+1]=[OPEN_FILE_TABLE+4*open_file_index+1]-1;
	
    //if the open instance count is 0 , invalidate all entries in the open file table,
	if([OPEN_FILE_TABLE+4*open_file_index+1]==0) then
		[OPEN_FILE_TABLE+4*open_file_index+0]=-1;
		[OPEN_FILE_TABLE+4*open_file_index+1]=-1;
		[OPEN_FILE_TABLE+4*open_file_index+2]=-1;
		[OPEN_FILE_TABLE+4*open_file_index+3]=-1;

        //if the index was not the inode root, decrement the file open count
		if(inode_index!=INODE_ROOT) then
			[FILE_STATUS_TABLE+4*inode_index+1]=[FILE_STATUS_TABLE+4*inode_index+1]-1;
		endif;

        //if file open count becomes zero, set it as -1
		if([FILE_STATUS_TABLE+4*inode_index+1]==0) then
			[FILE_STATUS_TABLE+4*inode_index+1]=-1;
		endif;

	endif;
	return;

endif;